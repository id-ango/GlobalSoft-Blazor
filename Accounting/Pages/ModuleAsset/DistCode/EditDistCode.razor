@page "/ModuleAsset/EditDistCode/{Id:int}"
@using eSoft.Asset.Model
@using eSoft.Asset.View
@using eSoft.Asset.Services
@using eSoft.Ledger.Model
@using eSoft.Ledger.Services

@inject IAssetServices service
@inject ILedgerServices serviceGl
@inject NavigationManager navigationmanager

<h3>Edit Distribution Code</h3>

<EditForm Model="@bank" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>
            Distribution Code :
            <InputText id="codeBank" class="form-control" @bind-Value="bank.DistCode" style="text-transform:uppercase" @onfocusout="cekKode" disabled="disabled" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Nama Distribution :
            <InputText class="form-control" @bind-Value="bank.Description" />
        </label>
    </div>

    <div class="form-group">
        <label>
            GL Account :
            <InputSelect class="form-control" @bind-Value="bank.Dist1" style="width:60%; display:inline">
                <option value="">&nbsp;&nbsp;---Select GL Account---&nbsp;&nbsp;</option>
                @foreach (var item in GlAccounts)
                {
                    <option value="@item.GlAcct">@item.NamaLengkap</option>
                }

            </InputSelect>
            <button class="btn btn-primary" type="button" @onclick="@(()=> SearchOpen = !SearchOpen)">Cari</button>
        </label>
    </div>
    <br/>
    <div class="float-md-right">
        <button class="btn-success" type="submit">Simpan</button>
        <button class="btn-danger" type="button" @onclick="@(() => navigationmanager.NavigateTo("/ModuleHutang/SetupDistCode", false))">Batal</button>
    </div>

</EditForm>

@if (DialogOpen)
{
    <ModalDialogComponent Title="Alert" Text="Kode Distribution Sudah Ada" TombolSave="false" OnClose="OnDialogClose"></ModalDialogComponent>
}

@if (SearchOpen)
{

    <ModalSearchComponent OnClose="OnSearchClose" Items="GlAccounts" Context="cbBank" GetFilterableText="@(item =>$"{item.GlAcct} {item.GlNama} ")">
        <TableHeader>
            <th scope="col">Code</th>
            <th scope="col">Bank Name</th>

            <th></th>
        </TableHeader>
        <RowTemplate>
            <td>@cbBank.GlAcct</td>
            <td>@cbBank.GlNama</td>

            <td>
                <button @onclick="() => BtnChoose(cbBank.GlAcct)" class="btn btn-success">Choose</button>

            </td>
        </RowTemplate>
    </ModalSearchComponent>


}

<style>
    label {
        width: 100%;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    AsDistSetView bank = new AsDistSetView();
    AsDistSet Bank = new AsDistSet();
    public string Testing { get; set; }
    private bool DialogOpen { get; set; }
    private List<GlAccount> GlAccounts;
    public bool SearchOpen { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadBank();
        LoadGlAccounts();
    }

    void LoadBank()
    {
        Bank = service.GetDistId(Id);
        bank.AsDistId = Bank.AsDistId;
        bank.DistCode = Bank.DistCode;
        bank.Description = Bank.Description;
        bank.Dist1 = Bank.Dist1;

    }

    private void cekKode()
    {
        Testing = bank.DistCode;
        DialogOpen = service.CekDistCode(Testing);
        if (DialogOpen)
        {
            bank.DistCode = "";
        }
        StateHasChanged();
    }

    private void OnDialogClose(bool accepted)
    {

        DialogOpen = false;
        StateHasChanged();

    }



    private async Task HandleValidSubmit()
    {
        var newEdit = await service.EditDist(bank);
        if (newEdit)
        {


        }

        navigationmanager.NavigateTo("/ModuleAsset/SetupDistCode", false);

    }

    void LoadGlAccounts()
    {
        GlAccounts = serviceGl.GetGlAccount();
    }

    private void BtnChoose(string textSearch)
    {
        if (!string.IsNullOrEmpty(textSearch))
        {
            bank.Dist1 = textSearch;
        }

        SearchOpen = false;
        StateHasChanged();
    }

    private void OnSearchClose(bool accepted)
    {

        SearchOpen = false;
        StateHasChanged();

    }
}


