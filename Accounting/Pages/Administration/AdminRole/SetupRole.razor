@page "/ModuleAdministration/SetupRole"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using Accounting.Services;
@using Accounting.Data;

@attribute [Authorize(Roles ="Admin")]

@inject IAdministrationServices serviceRole
@inject AuthenticationStateProvider AuthenticationStateProvider

@implements IDisposable
@inject NavigationManager navigationmanager

<div class="container">
    <h1>Setup Role</h1>
</div>


<div class="container">
    <NavLink href="/ModuleAdministration/AddRole" class="btn btn-primary">Add</NavLink>
</div>

<br />
<br />

<div class="container">
    <DataGridVerticalComponent Items="Banks" Context="cbBank" GetFilterableText="@(item =>$"{item.Name} {item.NormalizedName} ")">
        <TableHeader>
            <th scope="col">Id Role</th>
            <th scope="col">Role Name</th>
            <th scope="col">Normalized Name</th>

            <th></th>
        </TableHeader>
        <RowTemplate>
            <td>@cbBank.Id</td>
            <td>@cbBank.Name</td>
            <td>@cbBank.NormalizedName</td>

            <td>
                <button @onclick="() => OpenRubah(cbBank.Id)" class="btn btn-success">Edit</button>
                <button @onclick="() => OpenDeleteDialog(cbBank)" class="btn btn-danger">Delete</button>
            </td>
        </RowTemplate>
    </DataGridVerticalComponent>


</div>

@if (DeleteDialogOpen)
{
    <ModalDialogComponent Title="Are you sure?" Text="Do you want to delete this entry?" OnClose="OnDeleteDialogClose"></ModalDialogComponent>
}

@if (NullDialogOpen)
{
    <ModalDialogComponent Title="MESSAGE" Text="Saldo is not Zero" TombolSave="false" OnClose="OnDeleteNullClose"></ModalDialogComponent>
}



@code {

    private List<IdentityRole> Banks;
    private  IdentityRole _bankToDelete ;

    public bool DeleteDialogOpen { get; set; }
    public bool NullDialogOpen { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadGet();

    }


    private List<IdentityRole> LoadGet()
    {
        Banks = serviceRole.GetRoles();

        return Banks;
    }


    private void OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
             serviceRole.DelRoles(_bankToDelete.Id);
            

            _bankToDelete = null;
        }

        DeleteDialogOpen = false;
        LoadGet();

       // StateHasChanged();

    }

    private void OnDeleteNullClose(bool accepted)
    {
        //if (accepted)
        //{
        //    await cashBank.DelBank(_bankToDelete.CbBankId);
        //    _bankToDelete = null;
        //}

        DeleteDialogOpen = false;
        NullDialogOpen = false;
      //  LoadGet();
        StateHasChanged();

    }
    private void OpenDeleteDialog(IdentityRole bank)
    {
        
            DeleteDialogOpen = true;
        


        _bankToDelete = bank;
        StateHasChanged();
    }

    private void OpenRubah(string xKdBank)
    {
        navigationmanager.NavigateTo($"/ModuleAdministration/EditRole/{xKdBank}");
    }


    public void Dispose()
    {

    }
}
