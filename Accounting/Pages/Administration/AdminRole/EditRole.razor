@page "/ModuleAdministration/EditRole/{Id}"
@using Accounting.Services
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;

@inject IAdministrationServices ServiceRole
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationmanager

<h3>Edit Role</h3>

<EditForm Model="@bank" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>
             Id Role :
            <InputText id="codeBank" class="form-control" @bind-Value="bank.Id" style="text-transform:uppercase" disabled="disabled" />
        </label>
    </div>
    <div class="form-group">
        <label>
            Nama Role :
            <InputText class="form-control" @bind-Value="bank.Name"  @onfocusout="cekKode" />
        </label>
    </div>
    <br/>
   
    <div class="float-md-right">
        <button class="btn-success" type="submit">Simpan</button>
        <button class="btn-danger" type="button" @onclick="@(() => navigationmanager.NavigateTo("/ModuleAdministration/SetupRole", false))">Batal</button>
    </div>

</EditForm>

@if (DialogOpen)
{
    <ModalDialogComponent Title="Alert" Text="Name Sudah Ada" TombolSave="false" OnClose="OnDialogClose"></ModalDialogComponent>
}



<style>
    label {
        width: 100%;
    }
</style>

@code {
    [Parameter]
    public string Id { get; set; }

    IdentityRole bank = new IdentityRole();
    IdentityRole Bank = new IdentityRole();
    public string Testing { get; set; }
    private bool DialogOpen { get; set; }

    public bool SearchOpen { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadBank();

    }

    private void LoadBank()
    {
        Bank =  ServiceRole.GetRoleId(Id);

        if(Bank != null)
        {
            bank.Id = Bank.Id;
            bank.Name = Bank.Name;
            bank.NormalizedName = Bank.NormalizedName;
        }
       
       

    }

       private void cekKode()
    {
        Testing = bank.Name.ToUpper();
        DialogOpen = ServiceRole.CekNameRole(Testing);// RoleExistsAsync(Testing);
        if (DialogOpen)
        {
            bank.Name = "";
        }
        StateHasChanged();
    }


    private void OnDialogClose(bool accepted)
    {

        DialogOpen = false;
        StateHasChanged();

    }



    private async Task HandleValidSubmit()
    {
        bank.NormalizedName = bank.Name.ToUpper();

        var newEdit = await ServiceRole.EditRoles(bank);

        if (newEdit)
        {


        }

        navigationmanager.NavigateTo("/ModuleAdministration/SetupRole", false);

    }

 
}


