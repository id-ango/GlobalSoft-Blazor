@page "/ModuleBank/EditTrfBank/{id:int}"
@using eSoft.CashBank.Model
@using eSoft.CashBank.View


@inject ICashBankServices service
@inject NavigationManager navigationmanager

<div class="top-row px-4 " style="z-index:5">
    <h3>Edit Transfer Antar Bank</h3>
</div>




<div class="container">

    <EditForm Model="@Transh" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>
                Doc No. :
                <InputText class="form-control" @bind-Value="Transh.DocNo" style="text-transform:uppercase" disabled="disabled" />
            </label>
        </div>



        <div class="form-group">
            <label>
                Dari Rekening : <br />
                <InputSelect class="form-control" @bind-Value="Transh.KodeBank1" style="width:60%; display:inline" @oninput="OnKurs1">
                    <option value="">&nbsp;&nbsp;---Select Bank---&nbsp;&nbsp;</option>
                    @foreach (var item in banks)
                    {
                        <option value="@item.KodeBank">[@item.KodeBank]&nbsp; @item.NmBank</option>
                    }

                </InputSelect>
                &nbsp;@kurs1
            </label>
        </div>

        <div class="form-group">
            <label>
                Dari Rekening : <br />
                <InputSelect class="form-control" @bind-Value="Transh.KodeBank2" style="width:60%; display:inline" @oninput="OnKurs2">
                    <option value="">&nbsp;&nbsp;---Select Bank---&nbsp;&nbsp;</option>
                    @foreach (var item in banks)
                    {
                        <option value="@item.KodeBank">[@item.KodeBank]&nbsp; @item.NmBank</option>
                    }

                </InputSelect>
                &nbsp;@kurs2
            </label>
        </div>

        <div class="form-group">
            <label>
                Tanggal :
                <InputDate class="form-control" @bind-Value="Transh.Tanggal" />
            </label>
        </div>


        <div class="form-group">
            <label>
                Keterangan :
                <InputTextArea class="form-control" @bind-Value="Transh.Keterangan" />
            </label>
        </div>


        @if (this.IsKurs1 || this.IsKurs2)
        {
            <div class="container">


                <div class="row">
                    <div class="col">
                        <label>
                            Kurs :
                            <InputNumber class="form-control" @bind-Value="Transh.KValue" @onfocusout="KursUbah" />
                        </label>

                    </div>

                    <div class="col">
                        <label>
                            Receipt :
                            <InputNumber class="form-control" @bind-Value="Transh.KSaldo" @onfocusout="KursUbah" />
                        </label>

                    </div>
                </div>

            </div>
        }
        else
        {
            <div class="form-group">
                <label>
                    Jumlah :
                    <InputNumber class="form-control" @bind-Value="Transh.Saldo" />
                </label>


            </div>
        }

        <br />
        <div class="float-md-right">
            <button class="btn-success" type="submit">Simpan</button>
            <button class="btn-danger" type="button" @onclick="@(() => navigationmanager.NavigateTo(" /ModuleBank/TransAntarBank", false))">Batal</button>
        </div>
        <br />
        <br />


    </EditForm>

    <div class="float-md-right form-message">
        <span>Saldo   : @Transh.Saldo.ToString("#,##0.##")</span>
    </div>
    <div class="float-md-right form-message">
        <span> Balance : @Transh.KSaldo.ToString("#,##0.##")</span>
    </div>

</div>

<style>
    label {
        width: 100%;
    }
</style>



@code {

    [Parameter] public int Id { get; set; }

    private TransferView Transh = new TransferView();
    private CbTransfer TransAll = new CbTransfer();

    BankView bank = new BankView();
    public string Testing { get; set; }
    private bool DialogOpen { get; set; }

    public bool SearchOpen { get; set; }

    private List<CbBank> banks;


    //   private List<TransDView> TransDs = new List<TransDView>();
    private string enabled { get; set; }

    public string kurs1 { get; set; }
    public string kurs2 { get; set; }

    //   private bool IsVisible = false;
    private bool IsKurs1 = false;
    private bool IsKurs2 = false;
    //   private bool IsEdit = false;




    protected override void OnInitialized()
    {
        // Transh.Tanggal = DateTime.Now;

        LoadBank();
        LoadTrans();

          if (this.kurs1 == null)
        {
            this.IsKurs1 = false;
        }
        else
        {
            this.IsKurs1 = true;
        }

         if (this.kurs2 == null)
        {
            this.IsKurs2 = false;
        }
        else
        {
            this.IsKurs2 = true;
        }
    }

    void LoadBank()
    {
        banks = service.GetBank();
    }


    void LoadTrans()
    {
        TransAll = service.GetTransferId(Id);
        Transh.CbTransferId = Id;
        Transh.DocNo = TransAll.DocNo;
        Transh.Tanggal = TransAll.Tanggal;
        Transh.Kurs = TransAll.Kurs;
        Transh.KodeBank1 = TransAll.KodeBank1;
        Transh.KodeBank2 = TransAll.KodeBank2;
        kurs1 = TransAll.Kurs;
        kurs2 = TransAll.Kurs2;
        // kurs1 = service.GetBankKd(TransAll.KodeBank1).Kurs;
        // kurs2 = service.GetBankKd(TransAll.KodeBank2).Kurs;
        Transh.Keterangan = TransAll.Keterangan;
        Transh.Saldo = TransAll.Saldo;
        Transh.KSaldo = TransAll.KSaldo;
        Transh.KValue = TransAll.KValue;

       
    }


    private void OnKurs1(ChangeEventArgs args)
    {
        kurs1 = (from e in banks where e.KodeBank == args.Value.ToString() select e.Kurs).FirstOrDefault();

        if (this.kurs1 == null)
        {
            this.IsKurs1 = false;
        }
        else
        {
            this.IsKurs1 = true;
        }

    }

    private void OnKurs2(ChangeEventArgs args)
    {
        kurs2 = (from e in banks where e.KodeBank == args.Value.ToString() select e.Kurs).FirstOrDefault();
        if (this.kurs2 == null)
        {
            this.IsKurs2 = false;
        }
        else
        {
            this.IsKurs2 = true;
        }

    }




    private void KursUbah()
    {

        Transh.Saldo = Transh.KValue * Transh.KSaldo;

    }



    private void HandleValidSubmit()
    {
        Transh.Kurs = this.kurs1;
        Transh.Kurs2 = this.kurs2;

        var newEdit = service.EditTransfer(Transh);
        if (newEdit != null)
        {
            var id = newEdit.CbTransferId.ToString().Trim();

            //  await ExportToPdf(Transh);
            //  GeneratePDF(newEdit);
            navigationmanager.NavigateTo($"printTrfbank/{id}");


        }

        navigationmanager.NavigateTo("/ModuleBank/TransAntarBank", false);
        //add = !add;
        //StateHasChanged();

    }


}
