@page "/ModuleBank/DisplayBank"
@using eSoft.CashBank.Model
@using eSoft.CashBank.View

@using eSoft.CashBank.Services

@inject ICashBankServices cashBank
@implements IDisposable
@inject NavigationManager navigationmanager

<div class="container">
    <h1>Display Cash Bank</h1>
</div>


<div class="container">

    @foreach (var bank in Banks)
    {
        var Text = bank.NmBank;
        var Value = bank.KodeBank.ToString();
        bool Checked = false;
        if (selectedList.Contains(Value))
        {
            Checked = true;
        }
        <input type="checkbox" checked="@Checked"
               @onchange="EventArgs => { CheckboxClicked(Value, EventArgs.Value); }" />
        <label>@bank.NmBank</label>

        <br />
    }
    @OutputValue
</div>

<br />
<br />


<div class="container">
    <DataGridComponent Items="BankView" Context="cbBank" GetFilterableText="@(item =>$"{item.KodeBank} {item.NmBank} {item.Kurs}")">
        <TableHeader>
            <th scope="col">Code</th>
            <th scope="col">Bank Name</th>
            <th scope="col">Saldo</th>
            <th scope="col">Balance</th>
            <th scope="col">Currency</th>
            <th scope="col">Date Trx</th>
            <th></th>
        </TableHeader>
        <RowTemplate>
            <td>@cbBank.KodeBank</td>
            <td>@cbBank.NmBank</td>
            <td>@cbBank.Saldo.ToString("N")</td>
            <td>@cbBank.KSaldo.ToString("N")</td>
            <td>@cbBank.Kurs</td>
            <td>
                <input type="date" @bind-value="@TglStart" />
                <input type="date" @bind-value="@TglEnd" />
            </td>
            <td>
                <button @onclick="() => OpenCetak(TglStart,TglEnd,cbBank.KodeBank)" class="btn btn-success">Mutasi</button>

            </td>
        </RowTemplate>
    </DataGridComponent>


</div>

@if (DeleteDialogOpen)
{
    <ModalDialogComponent Title="Are you sure?" Text="Do you want to delete this entry?" OnClose="OnDeleteDialogClose"></ModalDialogComponent>
}

@if (NullDialogOpen)
{
    <ModalDialogComponent Title="MESSAGE" Text="Saldo is not Zero" TombolSave="false" OnClose="OnDeleteNullClose"></ModalDialogComponent>
}

@if (SearchOpen)
{
    
        <DataGridComponent Items="RekKoran" Context="cbBank" GetFilterableText="@(item =>$"{item.Keterangan} {item.DocNo} ")">
            <TableHeader>
                <th scope="col">Doc #</th>
                <th scope="col">Tanggal</th>
                <th scope="col">Keterangan</th>
                <th scope="col">Mutasi</th>
                <th scope="col">Saldo</th>
                <th></th>
            </TableHeader>
            <RowTemplate>
                <td>@cbBank.DocNo</td>
                <td>@cbBank.Tanggal.ToShortDateString()</td>
                <td>@cbBank.Keterangan</td>
                <td>@cbBank.Saldo</td>
                <td>@cbBank.Balance</td>
                <td>
                    @*<button @onclick="() => BtnChoose(cbBank.GlAcct)" class="btn btn-success">Choose</button>*@

                </td>
            </RowTemplate>
        </DataGridComponent>

        }



        @code {

    private List<CbBank> Banks;
        private List<CbBank> BankView = new List<CbBank>();
        private List<RekeningView> RekKoran = new List<RekeningView>();


        private CbBank _bankToDelete;
        private List<string> selectedList = new List<string>();
        private string OutputValue { get; set; }

        private DateTime TglStart = DateTime.Now;
        private DateTime TglEnd = DateTime.Now;

        public bool DeleteDialogOpen { get; set; }
        public bool NullDialogOpen { get; set; }
        public bool SearchOpen { get; set; }


        public bool asChecked { get; set; }

        protected override void OnInitialized()
        {
            base.OnInitialized();
            LoadGet();

        }

        private void LoadGet()
        {
            Banks = cashBank.GetBank();
        }


        private async Task OnDeleteDialogClose(bool accepted)
        {
            if (accepted)
            {
                await cashBank.DelBank(_bankToDelete.CbBankId);
                _bankToDelete = null;
            }

            DeleteDialogOpen = false;
            LoadGet();

            StateHasChanged();

        }

        private void OnDeleteNullClose(bool accepted)
        {

            DeleteDialogOpen = false;
            NullDialogOpen = false;
            LoadGet();
            StateHasChanged();

        }
        private void OpenDeleteDialog(CbBank bank)
        {
            if (bank.Saldo != 0)
            {
                NullDialogOpen = true;
            }
            else
            {
                DeleteDialogOpen = true;
            }


            _bankToDelete = bank;
            StateHasChanged();
        }

        private void OpenCetak(DateTime Tanggal1, DateTime Tanggal2, string KodeBank)
        {
            RekKoran = cashBank.CetakMutasi(Tanggal1, Tanggal2, KodeBank);
            SearchOpen = !SearchOpen;
        }


        public void Dispose()
        {

        }

        private void CheckboxClicked(string aSelectedId, object aChecked)
        {
            if ((bool)aChecked)
            {
                if (!selectedList.Contains(aSelectedId))
                {
                    selectedList.Add(aSelectedId);
                }
            }
            else
            {
                if (selectedList.Contains(aSelectedId))
                {
                    selectedList.Remove(aSelectedId);
                }
            }

            OutputValue = string.Join(",", selectedList.ToArray());

            BankView = (from e in Banks where selectedList.Contains(e.KodeBank) select e).ToList();


            StateHasChanged();

        }

        private void OnSearchClose(bool accepted)
        {

            SearchOpen = false;
            StateHasChanged();

        }
        }
