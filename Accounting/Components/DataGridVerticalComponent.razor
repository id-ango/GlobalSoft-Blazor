@typeparam TItem
@using System.Collections.Generic
@using System.Linq


<div class="bg-light justify-content-between">

    <p align="right">
        <input class="mr-sm-2" type="search" placeholder="Search" aria-label="Search" @bind-value="searchText">
        <button class="btn btn-outline-success my-2 my-sm-0" type="button" @onclick="searchFind">Search</button>
    </p>
</div>
<table class="table table-striped table-hover">

    <thead>

        <tr>@TableHeader</tr>
    </thead>
</table>
<div style="display:block;position:relative;height:450px;overflow:auto ">
    <table class="table table-striped table-hover">

        @*<thead>

                <tr>@TableHeader</tr>
            </thead>*@
        <tbody>
            @foreach (var item in Items)
            {
                <tr>@RowTemplate(item)</tr>
            }
        </tbody>

    </table>
</div>
@code {

    [Parameter]
    public RenderFragment TableHeader { get; set; }

    [Parameter]
    public RenderFragment<TItem> RowTemplate { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public Func<TItem, string> GetFilterableText { get; set; }


    private string searchText;

    private bool Enabled { get; set; } = true;

    private static readonly Func<TItem, string> DefaultGetFilterableText = item => (item?.ToString() ?? "");



    private void searchFind()
    {
        Func<TItem, string> filterFunc = GetFilterableText ?? DefaultGetFilterableText;
        IEnumerable<TItem> result = (Items ?? Array.Empty<TItem>());
        if (!string.IsNullOrEmpty(searchText))
        {
            result = result.
            Where(x =>
            (GetFilterableText(x) ?? "")
            .Contains(searchText, StringComparison.InvariantCultureIgnoreCase));
        }
        Items = result;


    }


}
